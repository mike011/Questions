27	Simplicity is a virtue. Never make code more complex than necessary.	Simplicity;virtue;Never;complex;necessary;
28	1. Synchronize your breathing with your movement.	Synchronize;breathing;movement;
29	2. Tune your nervous system to current conditions	nervous;system;current;conditions;Tune;
30	3. Follow a logical anatomical order.	Follow;logical;anatomical;order;
31	4. Make gains in your range or motion without pain.	Make;gains;range;motion;pain;
32	5. Stretch the fascia, not just the muscle.	Stretch;muscle;fascia;not;just;
33	6. Use multiple planes of movement.	multiple;planes;movement;
34	7. Target the entire joint.	Target;entire;joint;
35	8. Use traction for maximal lengthening.	traction;maximal;lengthening;Use;
36	9. Facilitate body reflexes for optimal results.	Facilitate;reflexes;optimal;results;body;
37	10. Adjust your stretching to your present goals.	Adjust;goals;stretching;present;
54	Fact 1 \	The most important factor in software work is the quality of the programmers.	programmers;quality;important;factor;software;
55	Fact 2 \	The best programmers are up to 28 times better than the worst programmers.	better;best;worst;times;programmers;
56	Fact 3 \	Adding people to a late project makes it later.	later;Adding;people;late;project;
57	Fact 4 \	The working environment has a profound impact on productivity and quality.	working;environment;quality;impact;productivity;
58	Fact 5 \	Hype (about tools and techniques) is the plague on the house of software.	plague;Hype;techniques;tools;software;
59	Fact 6   New tools and techniques cause an initial loss of productivity/quality.	tools;techniques;cause;initial;productivityquality;
60	Fact 7 \	Software developers talk a lot about tools, but seldom use them.	Software;developers;talk;seldom;
62	Fact 8 \	One of the two most common causes of runaway projects is poor estimation.	two;estimation;poor;causes;runaway;
63	Fact 9 \	Software estimation usually occurs at the wrong time.	Software;estimation;occurs;usually;wrong;
64	Fact 10 \	Software estimation is usually done by the wrong people.	wrong;Software;done;estimation;people;
65	Fact 11 \	Software estimates are rarely corrected as the project proceeds.	Software;corrected;estimates;proceeds;project;
66	F#12 It is not surprising that software estimates are bad. But we live and die by them anyway!	anyway;estimates;live;software;surprising;
67	Fact 13  There is a disconnect between software management and their programmers.	between;disconnect;management;programmers;
68	Fact 14  The answer to a feasability study is almost always “yes.”	Fact;almost;always;answer;feasability;
69	Fact 15  Reuse-in-the-small is a well-solved problem.	Reuseinthesmall;wellsolved;problem;
70	Fact 16  Reuse-in-the-large remains a mostly-unsolved problem.	Reuseinthelarge;mostlyunsolved;problem;
71	Fact 17  Reuse-in-the-large works best for families of related systems.	related;Reuseinthelarge;best;families;
72	Reusable components are three times as hard to build and should be tried out in three settings.	Reusable;build;components;settings;should;
73	Fact 19  Modification of reused code is particularly error-prone.	Modification;code;errorprone;particularly;
74	Fact 20  Design pattern reuse is one solution to the problem of code reuse.	Design;solution;code;pattern;problem;
75	For every 25% increase in problem complexity, there is a 100% increase in solution complexity.	problem;;every;solution;;
76	80% of software work is intellectual. A fair amount of is creative. Little of it is clerical.	intellectual;amount;clerical;creative;fair;
77	Fact 23  One of the two most common causes of runaway projects is unstable requirements.	most;common;projects;requirements;runaway;
78	Fact 24  Requirements errors are the most expensive to fix during production.	Requirements;during;errors;expensive;production;
79	Fact 25  Missing requirements are the hardest requirements errors to correct.	Missing;correct;errors;hardest;requirements;
80	Explicit requirements “explode” as implicit (design) requirements for a solution evolve.	Explicit;design;requirements;explode;implicit;
81	Fact 27  There is seldom one best design solution to a software problem.	solution;problem;solution;design;best;
82	Design is a complex, iterative process. Initial design solutions are usually wrong.	Design;Initial;complex;wrong;iterative;
83	Design is a complex, iterative process. Initial design solutions are certainly not optimal.	optimal;Initial;certainly;complex;solutions;
84	Designer primitives (solutions programmers can readily code) rarely match programmer primitives	Designer;readily;code;rarely;match;
85	COBOL is a very bad language, but all the others (for business applications) are so much worse.	COBOL;applications;business;language;much;
86	Fact 31  Error removal is the most time-consuming phase of the life cycle.	Error;removal;timeconsuming;cycle;most;
87	Fact 32  Software is usually tested at best 55 to 60 precent (branch) coverage level.	level;Software;best;branch;coverage;
88	Fact 33  One hundred percent coverage is still far from enough.	far;coverage;enough;from;hundred;
89	Fact 34  Test tools are essential, but many are rarely used.	used;Test;essential;many;rarely;
90	Fact 35  Test automation rarely is. Most testing activities cannot be automated.	activities;automated;automation;cannot;rarely;
91	Fact 36  Programmer-created, built-in debug code is an important supplement to testing tools.	important;Programmercreated;builtin;supplement;tools;
92	Rigorous inspections can remove up to 90% of errors before the first test case is run.	Rigorous;before;case;errors;first;
93	Fact 38  Rigorous inspections should not replace testing.	Rigorous;inspections;replace;should;testing;
94	Postdelivery reviews (some call them “retrospectives”) are important and seldon perfromed.	Postdelivery;important;perfromed;retrospectives;reviews;
95	Fact 40  Reviews are both technical and socialogical, and both factors must be accommodated.	Reviews;accommodated;factors;socialogical;technical;
96	Maintenance typically consumes 50 to 80 percent of software costs. 	Maintenance;consumes;costs;percent;software;
97	Maintenance is probably the most important life cycle phase of software.	Maintenance;important;probably;software;
98	Fact 42  Enhancements represent roughly 60 percent of maintenance costs.	Enhancements;costs;maintenance;percent;represent;
99	Fact 43  Maintenance is a solution, not a problem.	not;Maintenance;problem;solution;
100	Fact 44  Understanding the existing product is the most difficult task of maintenance.	Understanding;difficult;existing;maintenance;product;
101	Fact 45  Better methods lead to more maintenance, not less.	Better;not;lead;less;maintenance;
102	Fact 46  Quality is a collection of attributes.	Quality;attributes;collection;
103	Quality is not user satisfaction, meeting reqs, achieveing cost and schedule, or reliability.	Quality;achieveing;meeting;reliability;satisfaction;
104	Fact 48  There are errors that most programmers tend to make.	programmers;There;errors;make;most;
105	Fact 49  Errors tend to cluster.	Errors;cluster;tend;
106	Fact 50  There is no single best approach to software error removal.	removal;software;approach;best;error;
107	Residual errors will always persist. The goal should be to minimize or eliminate severe errors.	Residual;always;eliminate;severe;minimize;
108	Fact 52  Efficiency stems more from good design than from good coding.	Efficiency;good;coding;design;
109	Fact 53  High-order language code can be about 90% as efficient as comparable assembler code.	comparable;Highorder;about;assembler;language;
110	Fact 54  There are tradeoffs between size and time optimization.	between;optimization;tradeoffs;time;
111	Fact 55  Many researchers advocate rather than investigate.	advocate;investigate;rather;researchers;
112	Fallacy 1  You can’t manage what you can’t measure.	You;measure;manage;
113	Fallacy 2  You can manage quality into a software product.	manage;product;quality;software;
114	Fallacy 3  Programming can and should be egoless.	can;Programming;egoless;should;
115	Fallacy 4  Tools and tecniques: one size fits all.	all;Tools;fits;size;tecniques;
116	Fallacy 5  Software needs more methodologies.	Fallacy;Software;methodologies;needs;
117	To estimate cost and schedule, first estimate lines of code	cost;code;first;lines;schedule;
118	Fallacy 7  Random test input is a good way to optimize testing.	testing;Random;good;input;optimize;
119	Fallacy 8  “Given enough eyeballs, all bugs are shallow.”	Given;bugs;enough;eyeballs;
120	The way to predict the future maintenance costs is to look at past cost data.	maintenance;costs;predict;future;look;
121	The way to predict product replacement decisions is to look at past cost data.	decisions;predict;product;replacement;
122	Fallacy 10  You can teach people how to program by showing them how to write programs.	write;people;program;programs;showing;
127	Pick a single good coding style, and stick to it.	style;stick;single;good;coding;
128	If your team already has a coding standard, then use it. Don't use your own pet style.	team;coding;use;your;style;
130	Holy wars: Just say no. Do not get involved. Walk away.	wars;no;not;involved;away;
131	Tip 1 - Care About Your Craft	Your;Craft;Care;About;
132	Tip 2 - Think! About Your Work	Work;Think;About;
133	Tip 3 - Provide Options, Don't Make Lame Excuses	Provide;Options;Make;Lame;Excuses;
134	Tip 4 - Don't Live with Broken Windows	Broken;Live;Windows;
135	Tip 5 - Be a Catalyst for Change	Be;Change;Catalyst;
136	Tip 6 - Remember the Big Picture	Remember;Picture;Big;
148	Tip 7 - Make Quality a Requirements Issue	Requirements;Quality;Make;Issue;
149	Tip 8 - Invest Regularly in Your Knowledge Portfolio	Regularily;Portfolio;Knowledge;Invest;
150	Tip 9 - Critically Analyze What You Read and Hear	Crticially;Analayze;Read;Hear;What;
152	Tip 10 - It’s Both What You Say and the Way You Say It	Both;Say;You;Way;What;
153	Tip 12 - Make It Easy to Reuse	Reuse;Make;Easy;
154	Tip 13 - Eliminate Effects Between Unrelated Things	Unrelated;Elminate;Effects;Between;Things;
155	Tip 14 - There Are No Final Decisions.	No;Final;Decisions;
156	Tip 15 - Use Tracer Bullets to Find the Target	Tracer;Target;Find;Bullets;
157	Tip 16 - Prototype to Learn	to;Prototype;Learn;
158	Tip 17 - Program Close to the Problem Domain	Program;Problem;Domain;Close;
159	Tip 18 - Estimate to Avoid Surprises	Surprises;Estimate;to;Avoid;
160	Tip 19 - Iterate the Schedule with the Code	with;Schedule;Iterate;Code;
161	Tip 20 - Keep Knowledge in Plain Text	Plain;Knowledge;Keep;Text;
163	Employ a helpful naming convention that differentiates variable names from type names.	variable;naming;helpful;differentiates;convention;
166	Tip 21 Use the Power of Command Shells	Shells;Power;Command;
167	Tip 22 - Use a Single Editor Well	Well;Use;Single;Editor;
168	Tip 23 - Always Use Source Code Control	Source;Control;Code;Always;
169	Tip 24 - Fix the Problem, Not the Blame	Problem;Not;Fix;Blame;
170	Tip 25 - Don't Panic When Debugging	When;Panic;Debugging;
171	Tip 26 - "select" Isn't Broken.	select;Tip;Isn;Broken;
172	Tip 27 - Don't Assume It—Prove It	Prove;It;Don;Assume;
173	Tip 28 - Learn a Text Manipulation Language.	Text;Manipulation;Learn;Language;
174	Tip 29 - Write Code That Writes Code	Writes;Write;That;Code;
175	Tip 30 - You Can't Write Perfect Software	You;Write;Software;Perfect;
176	Tip 31 - Design with Contracts	with;Design;Contracts;
177	Tip 32 - Crash Early	Early;Crash;
178	Tip 33 - Use Assertions to Prevent the Impossible	Prevent;Impossible;Assertions;
179	Tip 34 - Use Exceptions for Exceptional Problems	Problems;Exceptions;Exceptional;
180	Tip 35 - Finish What You Start	You;What;Start;Finish;
181	Tip 36 - Minimize Coupling Between Modules	Modules;Minimize;Coupling;Between;
182	Tip 37 - Configure, Don't Integrate	Integrate;Don;Configure;
183	Tip 38 - Put Abstractions in Code, Details in Metadata	Metadata;Details;Code;Abstractions;
184	Tip 39 - Analyze Workflow to Improve Concurrency	Workflow;Improve;Concurrency;Analyze;
185	Tip 40 - Design Using Services	Using;Services;Design;
186	Tip 41 - Always Design for Concurrency	Design;Concurrency;Always;
187	Tip 42 - Separate Views from Models	from;Views;Separate;Models;
188	Tip 43 - Use Blackboards to Coordinate Workflow	Workflow;Coordinate;Blackboards;
189	Tip 44 - Don't Program by Coincidence	Program;Don;Coincidence;
190	Tip 45 - Estimate the Order of Your Algorithms	Your;Order;Estimate;Algorithms;
191	Tip 46 - Test Your Estimates	Your;Test;Estimates;
192	Tip 47 - Refactor Early, Refactor Often	Refactor;Often;Early;
193	Tip 48 - Design to Test	Test;Design;
194	Tip 49 - Test Your Software, or Your Users Will	Your;Will;Users;Test;Software;
195	Tip 50 - Don't Use Wizard Code You Don't Understand	Wizard;Understand;Don;Code;
196	Tip 51 - Don't Gather Requirements–Dig for Them	Them;Requirements;Gather;Don;Dig;
197	Tip 52 - Work with a User to Think Like a User	Work;User;User;Think;Like;
198	Tip 53 - Abstractions Live Longer than Details	Longer;Live;Details;Abstractions;
199	Tip 54 - Use a Project Glossary	Use;Project;Glossary;
200	Tip 55 - Don't Think Outside the Box–Find the Box	Think;Outside;Find;Box;
201	Tip 56 - Start When You're Ready.	When;Start;Ready;
202	Tip 57 - Some Things Are Better Done than Described	Some;Done;Described;Better;
203	Tip 58 - Don't Be a Slave to Formal Methods.	Slave;Methods;Formal;Be;
204	Tip 59 - Costly Tools Don't Produce Better Designs	Tools;Produce;Designs;Costly;Better;
205	Tip 60 - Organize Teams Around Functionality	Teams;Organize;Functionality;Around;
206	Tip 61 - Don't Use Manual Procedures	Use;Procedures;Manual;
207	Tip 62 - Test Early. Test Often. Test Automatically	Test;Often;Early;Automatically;
208	Tip 63 - Coding Ain't Done 'Til All the Tests Run	Tests;Run;Done;Coding;All;
209	Tip 64 - Use Saboteurs to Test Your Testing	Your;Testing;Test;Saboteurs;
210	Tip 65 - Test State Coverage, Not Code Coverage	State;Coverage;Coverage;Code;
211	Tip 66 - Find Bugs Once	Once;Find;Bugs;
212	Tip 67 - English is Just a Programming Language	Programming;Language;Just;English;
213	Tip 68 - Build Documentation In, Don't Bolt It On	Documentation;Build;Bolt;
214	Tip 69 - Gently Exceed Your Users' Expectations	Your;Users;Gently;Expectations;Exceed;
215	Tip 70 - Sign Your Work	Your;Work;Sign;
216	Tip 11 - DRY - Don't Repeat Yourself	Yourself;Repeat;DRY;
